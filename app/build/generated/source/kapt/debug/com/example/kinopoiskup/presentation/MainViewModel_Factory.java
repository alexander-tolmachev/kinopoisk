// Generated by Dagger (https://dagger.dev).
package com.example.kinopoiskup.presentation;

import com.example.kinopoiskup.data.DataStoreManager;
import com.example.kinopoiskup.data.MainRepository;
import com.example.kinopoiskup.entity.CollectionDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<DataStoreManager> dataStoreProvider;

  private final Provider<CollectionDao> daoProvider;

  private final Provider<MainRepository> repositoryProvider;

  public MainViewModel_Factory(Provider<DataStoreManager> dataStoreProvider,
      Provider<CollectionDao> daoProvider, Provider<MainRepository> repositoryProvider) {
    this.dataStoreProvider = dataStoreProvider;
    this.daoProvider = daoProvider;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(dataStoreProvider.get(), daoProvider.get(), repositoryProvider.get());
  }

  public static MainViewModel_Factory create(Provider<DataStoreManager> dataStoreProvider,
      Provider<CollectionDao> daoProvider, Provider<MainRepository> repositoryProvider) {
    return new MainViewModel_Factory(dataStoreProvider, daoProvider, repositoryProvider);
  }

  public static MainViewModel newInstance(DataStoreManager dataStore, CollectionDao dao,
      MainRepository repository) {
    return new MainViewModel(dataStore, dao, repository);
  }
}
